import os
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")  # –î–æ–±–∞–≤—å –≤ Render Secrets

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(user_id: int) -> bool:
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getChatMember"
    params = {"chat_id": CHANNEL_ID, "user_id": user_id}
    try:
        response = requests.get(url, params=params, timeout=5)
        data = response.json()
        status = data.get("result", {}).get("status", "")
        return status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

# –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
def search_movie(query: str) -> str:
    try:
        url = f"https://api.themoviedb.org/3/search/movie"
        params = {
            "api_key": TMDB_API_KEY,
            "query": query,
            "language": "ru"
        }
        response = requests.get(url, params=params, timeout=5)
        data = response.json()
        
        if data["results"]:
            movie = data["results"][0]
            title = movie["title"]
            year = movie["release_date"][:4] if movie["release_date"] else "–ù/–î"
            rating = movie["vote_average"]
            overview = movie["overview"][:200] + "..." if len(movie["overview"]) > 200 else movie["overview"]
            genres = ", ".join([str(g) for g in movie.get("genre_ids", [])])  # –£–ø—Ä–æ—â—ë–Ω–Ω–æ
            
            return f"üé¨ *{title} ({year})*\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/10\n\n{overview}"
        else:
            return "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ TMDb: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    if not is_subscribed(user.id):
        update.message.reply_text(
            f"üîí –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º—ã:\n"
            f"https://t.me/{CHANNEL_USERNAME}"
        )
        return
    update.message.reply_text(
        "üé• –ë–æ—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/—Ñ–∏–ª—å–º –ú–∞—Ç—Ä–∏—Ü–∞\n"
        "/—Ñ–∏–ª—å–º –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä\n"
        "/—Ñ–∏–ª—å–º –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä\n\n"
        "–ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤):\n"
        "/—Ç–æ–ø ‚Äî –¢–û–ü-10 —Ñ–∏–ª—å–º–æ–≤\n"
        "/–∂–∞–Ω—Ä –∫–æ–º–µ–¥–∏—è ‚Äî –ø–æ–¥–±–æ—Ä–∫–∞"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /—Ñ–∏–ª—å–º
def handle_movie(update: Update, context: CallbackContext):
    user = update.effective_user
    if not is_subscribed(user.id):
        update.message.reply_text(f"–ü–æ–¥–ø–∏—à–∏—Å—å: https://t.me/{CHANNEL_USERNAME}")
        return

    query = " ".join(context.args)
    if not query:
        update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: /—Ñ–∏–ª—å–º –ú–∞—Ç—Ä–∏—Ü–∞")
        return

    result = search_movie(query)
    update.message.reply_text(result, parse_mode="Markdown")

# –¢–û–ü-10 —Ñ–∏–ª—å–º–æ–≤ (–ø—Ä–µ–º–∏—É–º)
def top_movies(update: Update, context: CallbackContext):
    user = update.effective_user
    if not is_subscribed(user.id):
        update.message.reply_text(f"–ü–æ–¥–ø–∏—à–∏—Å—å: https://t.me/{CHANNEL_USERNAME}")
        return

    try:
        url = "https://api.themoviedb.org/3/movie/popular"
        params = {"api_key": TMDB_API_KEY, "language": "ru", "page": 1}
        response = requests.get(url, params=params, timeout=5)
        data = response.json()
        
        text = "üèÜ –¢–û–ü-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤:\n\n"
        for i, movie in enumerate(data["results"][:10], 1):
            title = movie["title"]
            year = movie["release_date"][:4] if movie["release_date"] else ""
            text += f"{i}. {title} ({year})\n"
        
        update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¢–û–ü–∞: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¢–û–ü–∞.")

# –ó–∞–ø—É—Å–∫
def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("—Ñ–∏–ª—å–º", handle_movie))
    dp.add_handler(CommandHandler("—Ç–æ–ø", top_movies))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
